// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  description String
  theme_id    String
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  is_deleted  Boolean  @default(false)

  theme      RestaurantTheme              @relation(fields: [theme_id], references: [id])
  address    RestaurantAddress?
  images     RestaurantImages[]
  categories RestaurantCategoryRelation[]
  menus      RestaurantMenu[]

  @@unique([id, ownerId, is_deleted(false)])
  @@unique([id, is_deleted(false)])
  @@index([ownerId, is_deleted(false)])
}

model RestaurantAddress {
  id            String   @id @default(uuid())
  restaurant_id String   @unique
  name          String
  lat           Decimal
  lng           Decimal
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurant_id], references: [id])
}

model RestaurantImages {
  id                  String   @id @default(uuid())
  restaurant_id       String
  image_url           String
  download_url        String
  pathname            String
  content_type        String
  content_disposition String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurant_id], references: [id])

  @@index([restaurant_id])
}

model RestaurantTheme {
  id        String   @id @default(uuid())
  color     String   @db.Char(7) // Format: #RRGGBB
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurants Restaurant[]

  @@index([ownerId])
}

model RestaurantCategory {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  restaurants RestaurantCategoryRelation[]
}

model RestaurantCategoryRelation {
  id            String             @id @default(uuid())
  restaurant_id String
  restaurant    Restaurant         @relation(fields: [restaurant_id], references: [id])
  category_id   String
  category      RestaurantCategory @relation(fields: [category_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([restaurant_id, category_id])
}

model RestaurantMenu {
  id            String   @id @default(uuid())
  name          String   @db.VarChar(255)
  restaurant_id String
  schema        Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  is_deleted    Boolean  @default(false)

  restaurant Restaurant @relation(fields: [restaurant_id], references: [id])

  @@index([restaurant_id, is_deleted(false)])
  @@index([is_deleted(false)])
}
